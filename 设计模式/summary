设计模式：
        1.单例模式
        这个内存当中关于此类 只有唯一的实例

        //1.构造一个类
        function Person(){
                //2.判断该类的某一属性是否已经存在
                   不存在，就创建一个实例，

                if(!Person._instance)
                    Person._instance = {

                        属性      （键值对）
                        方法

                        }


                存在，就返回当前内存中的实例
                return Person._instance;
        }


        2.工厂模式
        批量的创建某一个类时，可以使用工厂模式

        //0.构造一个类
        function Factory(){


        }
        //1.利用Factory.creat创建一个类
        类名.creat = function (type){
                switch(' 判断需要批量创建的类名'){

                    case "type":return 为某类创建实例

                    case "type":return 为某类创建实例

                }
        }

        3.策略模式      （解决耦合）
        基本就是将不同的功能单独分开，然后需要哪个的时候，就创建哪个功能的实例
        储备了多个类：代表不同的功能
        正在使用的类：调用需要的功能

