js学习总结：
1.<script>标签可以写在任何位置,但是最好写在head头部标签里（遵循规范）
2.应用外部js
        如：<script   type="text/javascript" src="path">
                引用外部函数之后
                当前<script>所包含的代码块将会失效
            </script>
3.数据类型以及一些命名规则(同java相似)
    3.1 使用var定义变量 （和java的区别） js：弱数据类型语言   java：强引用语言
        区别：
             java：int name = value ;根据变量名前面 声明的数据类型绝对类型

             javascript： var age = value ;age是根据value值得类型而改变类型：如何 value=18 age就是number类型，age="18" 就是string类型;
                       var name = value ;name变量比较特殊（是javascript内置对象，因此就算更改value的类型也还是string类型）

    3.2 基本类型：number;
                 string;
                 boolean;
                 array;

    3.3 复合类型：数组
                创建方法：1.new Array(value , "value");
                         2.Array(value , "value");
                         3.[value , "value"];
                 【注】与java中数组的区别
                       在java中存在泛型概念，意思是在一个数组里面的数组元素，类型应该相同
                       而 js 缺可以存放不同的类型

                遍历方法for in : 优点 不需要进行条件判断
                如  for(var i in array){

                }

                属性方法：

                栈方法
                    push();
                    【格式】数组.push(元素1，元素2，....);
                    功能：给数组末尾添加元素
                    返回值：添加元素以后，数组得长度

                    pop();
                    【格式】数组.pop();
                    功能：移除数组末尾的最后一个元素
                    参数：无参，只是删除最后一个元素

                队列方法
                    push();


                    shift()
                    【格式】数组.shift();
                    功能：从数组的头部取下一个元素
                    返回值：取下的元素

                    unshift()
                    【格式】数组.unshift(参数...)
                    功能：从数组头部插入数据
                    返回值：插入后的长度

                其它方法
                    1.concat()；
                    【格式】数组.concat(数组2)；
                    功能：将两个数组合并成一个新数组
                    返回值：合并后的数组

                    如： var array = ["钢铁侠" , "雷神" , "美队"];
                         var newArray = ["蝙蝠侠" , "超人"];

                         alert(newArray.concat(array));
                         result: 蝙蝠侠，超人，钢铁侠，雷神，美队

                    2.slice()
                     【格式】数组.slice(start , end);
                     功能：复制数组元素；
                     参数：start:下标   end:复制几个
                     返回值:复制的数组；

                     如：var array = ["钢铁侠" , "美队" , "雷神索尔"];
                         var newArray = array.slice(0,2);

                         alert(newArray);
                         result: 钢铁侠，美队

                     3.splice 常用 可以完成删除，插入，替换操作
                     参数： 参数1 截取的开始下标
                            参数2 截取的长度
                            参数3 在截取的开始下标位置，我们要插入的元素，插入的元素个数

                            //剪切功能：
                             var array = ["钢铁侠" , "美队" , "雷神索尔"];
                             var newArray = array.splice(1,2);
                             alert(newArray);       result: 美队，雷神索尔
                             alert(array);          result: 钢铁侠

                             //插入功能
                              var array = ["钢铁侠" , "美队" , "雷神索尔"];
                                var newArray = array.splice(3,0,"金刚狼","??");
                                alert(newArray);        // 剪切的数据  没有
                                alert(array);           // 插入之后的数组  钢铁侠,美队,雷神索尔金刚狼，？？

                             //替换功能
                             同插入功能  将需要替换的数据删除
        函数 typeof:
                    用法：typeof 变量，返回值变量的数据类型；

4.运算符(同java类似)
    注意：
        4.1 任何类型与字符串做 + 运算结果都是以字符串的加法形式显示（连接）
           如：var sum = 1 + "5";
              结果："15";

        4.2 number类型和字符串做减法运算时、

           纯数字的字符串将会自动转换成number类型
           如：var sum = 1 - "5";
              结果： -4;

           非纯数字的字符串将会返回Nan；（not number的意思）
           如: var sum = 1 - "5a";
              结果： Nan;

5.强制转换类型
        5.1 String 和 Number 互转

            String ——> Number
            var sum = "15";
                   var num = parseInt(sum); //相对于非纯数字的字符串，他是尽可能的转换 遇到非数字后停止转换 如：1a5a 结果 1 ;
                   var num = Number(sum);   //整体转换 如果不是纯字符串 结果为: Nan ;

            Number ——> String
             var num = 15 ;
                    var sum = String(num);

        5.2 String 和 Boolean 互转
            String ——> Boolean
            var sum = "ss";
                    var num = Boolean(sum); //空值或NULL 返回false ，非空true;

            Boolean ——> String
            var sum = true
                    var num = String(sum); //同Number ——> String 类似;

        5.3 Number 和 Boolean 互转
            Number ——> Boolean
            var sum = 1;
                    var num = Boolean(sum); //0为false 非0 为true;

            Boolean ——> Number;
            var sum = true;
                    var num = Number(sum);  //true = 1 ; false = 0 ;

                    var parseInt(sum); //Nan; 同String ——> Number 的paserInt原理相同;

6.关系运算符进阶
        6.1 任何非数值类型和数值类型进行比较时都会转会为数值型在比较(不可以和杂乱的字符串比较："字母和数字混合的");
            如: alert(2 > "1");   result : true;
                alert(1 == "1");  result : true;
                alert(1 == true); result : true;

        6.2 任何数值类型 和 NaN 进行比较
                true == NaN;    //只要是等于 就会 false;
                "ss" == NaN;    //只要是等于 就会 false;
                Nan  == NaN;    //只要是等于 就会 false;

                true != NaN;    //只要是不等于 就会 返回 true;


7.递归
        7.1 概念
        函数可以自己调用自己，执行过程比较特殊，未知得表达式并不会计算，除非找到临界值
        用栈得概念就很容易理解，前面得表达式无法计算出，一个接一个压倒栈顶，在某一个表达式
        可以计算出得时候，就会一次取入前面得表达式一一计算
        【注】 因此会占用很多内存，所以在工作当中一般禁止使用递归

            方法：
                1. 首先去找到临界值，不需要计算就知道的值
                2. 找这一次和上一次的关系
                3. 假设当前函数可以使用，调用自身计算上一次的运行结果

            特点：
                1. 必须有参数
                2. 必须有return

                如1到100的和
                function sum(n){
                    if (n == 100){
                        return 100;
                    }else{
                        return sum(n) = sum(n+1) + n;
                    }
                }


8.事件驱动加载函数
        8.1 代码执行是按顺序执行的，在上方的js代码会获取不到对象
            如：var btn = document.getElementById("对象");
                alert(btn);

                显示：null   找不到对象，因为页面元素尚未加载成功
            解决方法：
                    使用window.onload = function(){

                    }
                    window.onload 意思是等页面元素全部加载完成之后，在执行此函数

        8.2 事件加载驱动
            8.2.1 可以在代码为其添加触发代码的形式

            鼠标单击事件
                  btn.onclick = function(){
                        单击之后执行的代码
                  }

            鼠标悬停事件
                  btn.onmouseover = function(){

                  }

            8.2.2 可以直接在页面元素绑定方法

                   如: onclick="函数";





js控制页面元素
         文本框
            获取文本框的值
            对象.value
            在文本框输入值
            对象.value = "值";



